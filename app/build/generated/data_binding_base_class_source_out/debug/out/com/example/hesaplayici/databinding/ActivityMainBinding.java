// Generated by view binder compiler. Do not edit!
package com.example.hesaplayici.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.hesaplayici.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button ac;

  @NonNull
  public final Button ans;

  @NonNull
  public final Button button0;

  @NonNull
  public final Button button1;

  @NonNull
  public final Button button2;

  @NonNull
  public final Button button3;

  @NonNull
  public final Button button4;

  @NonNull
  public final Button button5;

  @NonNull
  public final Button button6;

  @NonNull
  public final Button button7;

  @NonNull
  public final Button button8;

  @NonNull
  public final Button button9;

  @NonNull
  public final Button buttonCloseParenthesis;

  @NonNull
  public final Button buttonCos;

  @NonNull
  public final Button buttonFactorial;

  @NonNull
  public final Button buttonLn;

  @NonNull
  public final Button buttonLog;

  @NonNull
  public final Button buttonMMinus;

  @NonNull
  public final Button buttonMPlus;

  @NonNull
  public final Button buttonMc;

  @NonNull
  public final Button buttonMr;

  @NonNull
  public final Button buttonMs;

  @NonNull
  public final Button buttonOpenParenthesis;

  @NonNull
  public final Button buttonPower;

  @NonNull
  public final Button buttonSin;

  @NonNull
  public final Button buttonSqrt;

  @NonNull
  public final Button buttonTan;

  @NonNull
  public final Button del;

  @NonNull
  public final Button divide;

  @NonNull
  public final Button dot;

  @NonNull
  public final Button equals;

  @NonNull
  public final View gridLayout;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final Guideline guidelineButtonsStart;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final Guideline guidelineResultEnd;

  @NonNull
  public final ConstraintLayout mainLayout;

  @NonNull
  public final Button minus;

  @NonNull
  public final Button multiply;

  @NonNull
  public final Button percentage;

  @NonNull
  public final Button plus;

  @NonNull
  public final TextView textViewHistory;

  @NonNull
  public final TextView textViewResult;

  private ActivityMainBinding(@NonNull ConstraintLayout rootView, @NonNull Button ac,
      @NonNull Button ans, @NonNull Button button0, @NonNull Button button1,
      @NonNull Button button2, @NonNull Button button3, @NonNull Button button4,
      @NonNull Button button5, @NonNull Button button6, @NonNull Button button7,
      @NonNull Button button8, @NonNull Button button9, @NonNull Button buttonCloseParenthesis,
      @NonNull Button buttonCos, @NonNull Button buttonFactorial, @NonNull Button buttonLn,
      @NonNull Button buttonLog, @NonNull Button buttonMMinus, @NonNull Button buttonMPlus,
      @NonNull Button buttonMc, @NonNull Button buttonMr, @NonNull Button buttonMs,
      @NonNull Button buttonOpenParenthesis, @NonNull Button buttonPower, @NonNull Button buttonSin,
      @NonNull Button buttonSqrt, @NonNull Button buttonTan, @NonNull Button del,
      @NonNull Button divide, @NonNull Button dot, @NonNull Button equals, @NonNull View gridLayout,
      @Nullable Guideline guidelineButtonsStart, @Nullable Guideline guidelineResultEnd,
      @NonNull ConstraintLayout mainLayout, @NonNull Button minus, @NonNull Button multiply,
      @NonNull Button percentage, @NonNull Button plus, @NonNull TextView textViewHistory,
      @NonNull TextView textViewResult) {
    this.rootView = rootView;
    this.ac = ac;
    this.ans = ans;
    this.button0 = button0;
    this.button1 = button1;
    this.button2 = button2;
    this.button3 = button3;
    this.button4 = button4;
    this.button5 = button5;
    this.button6 = button6;
    this.button7 = button7;
    this.button8 = button8;
    this.button9 = button9;
    this.buttonCloseParenthesis = buttonCloseParenthesis;
    this.buttonCos = buttonCos;
    this.buttonFactorial = buttonFactorial;
    this.buttonLn = buttonLn;
    this.buttonLog = buttonLog;
    this.buttonMMinus = buttonMMinus;
    this.buttonMPlus = buttonMPlus;
    this.buttonMc = buttonMc;
    this.buttonMr = buttonMr;
    this.buttonMs = buttonMs;
    this.buttonOpenParenthesis = buttonOpenParenthesis;
    this.buttonPower = buttonPower;
    this.buttonSin = buttonSin;
    this.buttonSqrt = buttonSqrt;
    this.buttonTan = buttonTan;
    this.del = del;
    this.divide = divide;
    this.dot = dot;
    this.equals = equals;
    this.gridLayout = gridLayout;
    this.guidelineButtonsStart = guidelineButtonsStart;
    this.guidelineResultEnd = guidelineResultEnd;
    this.mainLayout = mainLayout;
    this.minus = minus;
    this.multiply = multiply;
    this.percentage = percentage;
    this.plus = plus;
    this.textViewHistory = textViewHistory;
    this.textViewResult = textViewResult;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.ac;
      Button ac = ViewBindings.findChildViewById(rootView, id);
      if (ac == null) {
        break missingId;
      }

      id = R.id.ans;
      Button ans = ViewBindings.findChildViewById(rootView, id);
      if (ans == null) {
        break missingId;
      }

      id = R.id.button_0;
      Button button0 = ViewBindings.findChildViewById(rootView, id);
      if (button0 == null) {
        break missingId;
      }

      id = R.id.button_1;
      Button button1 = ViewBindings.findChildViewById(rootView, id);
      if (button1 == null) {
        break missingId;
      }

      id = R.id.button_2;
      Button button2 = ViewBindings.findChildViewById(rootView, id);
      if (button2 == null) {
        break missingId;
      }

      id = R.id.button_3;
      Button button3 = ViewBindings.findChildViewById(rootView, id);
      if (button3 == null) {
        break missingId;
      }

      id = R.id.button_4;
      Button button4 = ViewBindings.findChildViewById(rootView, id);
      if (button4 == null) {
        break missingId;
      }

      id = R.id.button_5;
      Button button5 = ViewBindings.findChildViewById(rootView, id);
      if (button5 == null) {
        break missingId;
      }

      id = R.id.button_6;
      Button button6 = ViewBindings.findChildViewById(rootView, id);
      if (button6 == null) {
        break missingId;
      }

      id = R.id.button_7;
      Button button7 = ViewBindings.findChildViewById(rootView, id);
      if (button7 == null) {
        break missingId;
      }

      id = R.id.button_8;
      Button button8 = ViewBindings.findChildViewById(rootView, id);
      if (button8 == null) {
        break missingId;
      }

      id = R.id.button_9;
      Button button9 = ViewBindings.findChildViewById(rootView, id);
      if (button9 == null) {
        break missingId;
      }

      id = R.id.button_close_parenthesis;
      Button buttonCloseParenthesis = ViewBindings.findChildViewById(rootView, id);
      if (buttonCloseParenthesis == null) {
        break missingId;
      }

      id = R.id.button_cos;
      Button buttonCos = ViewBindings.findChildViewById(rootView, id);
      if (buttonCos == null) {
        break missingId;
      }

      id = R.id.button_factorial;
      Button buttonFactorial = ViewBindings.findChildViewById(rootView, id);
      if (buttonFactorial == null) {
        break missingId;
      }

      id = R.id.button_ln;
      Button buttonLn = ViewBindings.findChildViewById(rootView, id);
      if (buttonLn == null) {
        break missingId;
      }

      id = R.id.button_log;
      Button buttonLog = ViewBindings.findChildViewById(rootView, id);
      if (buttonLog == null) {
        break missingId;
      }

      id = R.id.button_m_minus;
      Button buttonMMinus = ViewBindings.findChildViewById(rootView, id);
      if (buttonMMinus == null) {
        break missingId;
      }

      id = R.id.button_m_plus;
      Button buttonMPlus = ViewBindings.findChildViewById(rootView, id);
      if (buttonMPlus == null) {
        break missingId;
      }

      id = R.id.button_mc;
      Button buttonMc = ViewBindings.findChildViewById(rootView, id);
      if (buttonMc == null) {
        break missingId;
      }

      id = R.id.button_mr;
      Button buttonMr = ViewBindings.findChildViewById(rootView, id);
      if (buttonMr == null) {
        break missingId;
      }

      id = R.id.button_ms;
      Button buttonMs = ViewBindings.findChildViewById(rootView, id);
      if (buttonMs == null) {
        break missingId;
      }

      id = R.id.button_open_parenthesis;
      Button buttonOpenParenthesis = ViewBindings.findChildViewById(rootView, id);
      if (buttonOpenParenthesis == null) {
        break missingId;
      }

      id = R.id.button_power;
      Button buttonPower = ViewBindings.findChildViewById(rootView, id);
      if (buttonPower == null) {
        break missingId;
      }

      id = R.id.button_sin;
      Button buttonSin = ViewBindings.findChildViewById(rootView, id);
      if (buttonSin == null) {
        break missingId;
      }

      id = R.id.button_sqrt;
      Button buttonSqrt = ViewBindings.findChildViewById(rootView, id);
      if (buttonSqrt == null) {
        break missingId;
      }

      id = R.id.button_tan;
      Button buttonTan = ViewBindings.findChildViewById(rootView, id);
      if (buttonTan == null) {
        break missingId;
      }

      id = R.id.del;
      Button del = ViewBindings.findChildViewById(rootView, id);
      if (del == null) {
        break missingId;
      }

      id = R.id.divide;
      Button divide = ViewBindings.findChildViewById(rootView, id);
      if (divide == null) {
        break missingId;
      }

      id = R.id.dot;
      Button dot = ViewBindings.findChildViewById(rootView, id);
      if (dot == null) {
        break missingId;
      }

      id = R.id.equals;
      Button equals = ViewBindings.findChildViewById(rootView, id);
      if (equals == null) {
        break missingId;
      }

      id = R.id.gridLayout;
      View gridLayout = ViewBindings.findChildViewById(rootView, id);
      if (gridLayout == null) {
        break missingId;
      }

      id = R.id.guideline_buttons_start;
      Guideline guidelineButtonsStart = ViewBindings.findChildViewById(rootView, id);

      id = R.id.guideline_result_end;
      Guideline guidelineResultEnd = ViewBindings.findChildViewById(rootView, id);

      ConstraintLayout mainLayout = (ConstraintLayout) rootView;

      id = R.id.minus;
      Button minus = ViewBindings.findChildViewById(rootView, id);
      if (minus == null) {
        break missingId;
      }

      id = R.id.multiply;
      Button multiply = ViewBindings.findChildViewById(rootView, id);
      if (multiply == null) {
        break missingId;
      }

      id = R.id.percentage;
      Button percentage = ViewBindings.findChildViewById(rootView, id);
      if (percentage == null) {
        break missingId;
      }

      id = R.id.plus;
      Button plus = ViewBindings.findChildViewById(rootView, id);
      if (plus == null) {
        break missingId;
      }

      id = R.id.textViewHistory;
      TextView textViewHistory = ViewBindings.findChildViewById(rootView, id);
      if (textViewHistory == null) {
        break missingId;
      }

      id = R.id.textViewResult;
      TextView textViewResult = ViewBindings.findChildViewById(rootView, id);
      if (textViewResult == null) {
        break missingId;
      }

      return new ActivityMainBinding((ConstraintLayout) rootView, ac, ans, button0, button1,
          button2, button3, button4, button5, button6, button7, button8, button9,
          buttonCloseParenthesis, buttonCos, buttonFactorial, buttonLn, buttonLog, buttonMMinus,
          buttonMPlus, buttonMc, buttonMr, buttonMs, buttonOpenParenthesis, buttonPower, buttonSin,
          buttonSqrt, buttonTan, del, divide, dot, equals, gridLayout, guidelineButtonsStart,
          guidelineResultEnd, mainLayout, minus, multiply, percentage, plus, textViewHistory,
          textViewResult);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
